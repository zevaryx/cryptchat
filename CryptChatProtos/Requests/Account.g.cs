// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: account.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CryptChatProtos.Requests.Account {

  /// <summary>Holder for reflection information generated from account.proto</summary>
  public static partial class AccountReflection {

    #region Descriptor
    /// <summary>File descriptor for account.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AccountReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1hY2NvdW50LnByb3RvEiBjcnlwdGNoYXRwcm90b3MucmVxdWVzdHMuYWNj",
            "b3VudCJoChVDaGFuZ2VQYXNzd29yZFJlcXVlc3QSDQoFdG9rZW4YASABKAkS",
            "EAoIb2xkX2hhc2gYAiABKAkSEAoIbmV3X2hhc2gYAyABKAkSDgoGcHVia2V5",
            "GAQgASgJEgwKBHNhbHQYBSABKAlCI6oCIENyeXB0Q2hhdFByb3Rvcy5SZXF1",
            "ZXN0cy5BY2NvdW50YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CryptChatProtos.Requests.Account.ChangePasswordRequest), global::CryptChatProtos.Requests.Account.ChangePasswordRequest.Parser, new[]{ "Token", "OldHash", "NewHash", "Pubkey", "Salt" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ChangePasswordRequest : pb::IMessage<ChangePasswordRequest> {
    private static readonly pb::MessageParser<ChangePasswordRequest> _parser = new pb::MessageParser<ChangePasswordRequest>(() => new ChangePasswordRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangePasswordRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CryptChatProtos.Requests.Account.AccountReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePasswordRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePasswordRequest(ChangePasswordRequest other) : this() {
      token_ = other.token_;
      oldHash_ = other.oldHash_;
      newHash_ = other.newHash_;
      pubkey_ = other.pubkey_;
      salt_ = other.salt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePasswordRequest Clone() {
      return new ChangePasswordRequest(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "old_hash" field.</summary>
    public const int OldHashFieldNumber = 2;
    private string oldHash_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OldHash {
      get { return oldHash_; }
      set {
        oldHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "new_hash" field.</summary>
    public const int NewHashFieldNumber = 3;
    private string newHash_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NewHash {
      get { return newHash_; }
      set {
        newHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pubkey" field.</summary>
    public const int PubkeyFieldNumber = 4;
    private string pubkey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pubkey {
      get { return pubkey_; }
      set {
        pubkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "salt" field.</summary>
    public const int SaltFieldNumber = 5;
    private string salt_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Salt {
      get { return salt_; }
      set {
        salt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangePasswordRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangePasswordRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (OldHash != other.OldHash) return false;
      if (NewHash != other.NewHash) return false;
      if (Pubkey != other.Pubkey) return false;
      if (Salt != other.Salt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (OldHash.Length != 0) hash ^= OldHash.GetHashCode();
      if (NewHash.Length != 0) hash ^= NewHash.GetHashCode();
      if (Pubkey.Length != 0) hash ^= Pubkey.GetHashCode();
      if (Salt.Length != 0) hash ^= Salt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (OldHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OldHash);
      }
      if (NewHash.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NewHash);
      }
      if (Pubkey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Pubkey);
      }
      if (Salt.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Salt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (OldHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OldHash);
      }
      if (NewHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewHash);
      }
      if (Pubkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pubkey);
      }
      if (Salt.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Salt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangePasswordRequest other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.OldHash.Length != 0) {
        OldHash = other.OldHash;
      }
      if (other.NewHash.Length != 0) {
        NewHash = other.NewHash;
      }
      if (other.Pubkey.Length != 0) {
        Pubkey = other.Pubkey;
      }
      if (other.Salt.Length != 0) {
        Salt = other.Salt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 18: {
            OldHash = input.ReadString();
            break;
          }
          case 26: {
            NewHash = input.ReadString();
            break;
          }
          case 34: {
            Pubkey = input.ReadString();
            break;
          }
          case 42: {
            Salt = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
